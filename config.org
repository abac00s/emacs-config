* Package system
#+BEGIN_SRC emacs-lisp
  (setq lexical-binding t)

  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)

  (eval-when-compile (require 'use-package))
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC
* .emacs.d
** Configuration files
#+BEGIN_SRC emacs-lisp
  (defvar my-config-org "~/.emacs.d/config.org")
  (defvar my-config-el "~/.emacs.d/config.el")
  (defvar my-custom-file "~/.emacs.d/init-custom.el")

  (defun my-open-emacs-config ()
    (interactive)
    (find-file my-config-org))

  (defun my-compile-emacs-config ()
    (interactive)
    (org-babel-tangle-file my-config-org my-config-el)
    (if (byte-compile-file my-config-el)
	(message "Compilation successful!")
      (message "Compilation unsuccessful..."))
    (with-current-buffer "*Compile-Log*" (kill-buffer-and-window)))

  (setq custom-file my-custom-file)
  (unless (file-exists-p custom-file)
    (with-temp-buffer
      (write-file custom-file)))
  (load-file custom-file)
#+END_SRC
** Backups
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups")))
#+END_SRC
* General
#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    (general-override-mode 1))
#+END_SRC
* Evil mode
** Basic
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :after general

    :init
    (setq evil-want-keybinding nil)

    :config
    (evil-mode 1)
    (general-evil-setup)
    (general-unbind 'motion "C-b" "C-d" "C-e" "C-m" "C-o" "C-v" "C-w" "C-y" "TAB")
    (general-unbind 'normal "C-i" "C-n" "C-p" "C-t" "TAB")

    (general-imap "f" (general-key-dispatch 'self-insert-command
			:timeout 0.5
			"d" 'evil-normal-state))

    (general-mmap "," (general-simulate-key "C-c"))
    (general-mmap "C-S-v" #'evil-visual-block)

    :custom
    (evil-auto-indent nil)
    (evil-cross-lines t)
    (evil-disable-insert-state-bindings t)
    (evil-move-beyond-eol t)
    (evil-move-cursor-back nil))
#+END_SRC
** Evil-surround
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :after evil
    :config (global-evil-surround-mode 1))
#+END_SRC
* Ace-jump
#+BEGIN_SRC emacs-lisp
  (use-package ace-jump-mode
    :general
    ("C-c" 'ace-jump-char-mode)
    ('motion "f" 'ace-jump-char-mode)

    :config
    (evil-declare-motion 'ace-jump-char-mode)

    :custom
    (ac-auto-show-menu t)

    :custom-face
    (ace-jump-face-foreground ((t (:background "black" :foreground "yellow" :weight bold)))))
#+END_SRC
* Which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config (which-key-mode))
#+END_SRC
* Leader
#+BEGIN_SRC emacs-lisp
  (general-create-definer my-leader-def
    :states '(motion)
    :keymap 'override
    :prefix "SPC")

  (my-leader-def
    "" nil
    "SPC" '(execute-extended-command :wk "M-x")
    "h" '(:keymap help-map :wk "help")
    "w" '(:keymap evil-window-map :wk "windows")
    "TAB" 'previous-buffer

    "f" '(:wk "files")
    "f s" 'save-buffer
    "f f" 'find-file

    "f q" '(:wk "config")
    "f q q" 'my-open-emacs-config
    "f q c" 'my-compile-emacs-config

    "d" 'switch-to-buffer

    "a d" 'dired
    "a q" 'save-buffers-kill-emacs)
#+END_SRC
* UI
#+BEGIN_SRC emacs-lisp
  (use-package material-theme
    :if window-system
    :config
    (load-theme 'material t))

  (tool-bar-mode 0)
  (scroll-bar-mode 0)
  (menu-bar-mode 0)
  (set-face-attribute 'default nil :family "Inconsolata" :height 140)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (setq frame-title-format '(multiple-frames "%b" "Emacs"))
#+END_SRC
* Windows and frames
** Winner mode
#+BEGIN_SRC emacs-lisp 
  (winner-mode 1)
#+END_SRC
** Custom keybindings
#+BEGIN_SRC emacs-lisp
  (general-def evil-window-map
    "u" #'winner-undo
    "r" #'winner-redo
    "N" #'make-frame-command
    "Q" #'delete-frame)

  (my-leader-def
    "o" #'other-window
    "O" #'other-frame)
#+END_SRC
* Helm
** Basic
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :init
    (require 'helm-config)
    (require 'helm-eshell)

    :general
    ("M-x" #'helm-M-x
     "C-x b" #'helm-mini
     "C-x C-b" #'helm-mini
     "C-x C-f" #'helm-find-files
     "M-y" #'helm-show-kill-ring
     "C-:" #'helm-eval-expression-with-eldoc)

    (my-leader-def
      "SPC" #'helm-M-x
      "d" #'helm-mini

      "f f" #'helm-find-files
      "f F" #'helm-find

      "i i" #'helm-semantic-or-imenu
      "i o" #'helm-occur
      "i m" #'helm-all-mark-rings

      "a t" #'helm-top)

    (help-map
     "v" #'helm-apropos
     "f" #'helm-apropos
     "g" #'helm-google-suggest
     "a" #'helm-apropos
     "M" #'helm-man-woman)

    (helm-map
     "TAB" #'helm-execute-persistent-action
     "C-i" #'helm-execute-persistent-action
     "C-z" #'helm-select-action)

    (general-def
      :keymaps '(emacs-lisp-mode-map
		 lisp-interaction-mode-map)
      "<C-tab>" #'helm-lisp-completion-at-point)

    (shell-mode-map "M-r" #'helm-comint-input-ring)

    :custom
    (helm-semantic-fuzzy-match t)
    (helm-imenu-fuzzy-match t)
    (helm-apropos-fuzzy-match t)
    (helm-lisp-fuzzy-completion t)

    :config
    (helm-mode 1)

    (add-hook 'eshell-mode-hook
	      #'(lambda ()
		  (local-set-key (kbd "M-r") #'helm-eshell-history))))
#+END_SRC
** Helm-descbinds
#+BEGIN_SRC emacs-lisp
  (use-package helm-descbinds
    :config (helm-descbinds-mode)
    :general
    (help-map "b" #'helm-descbinds))
#+END_SRC
** Helm-spotify-plus
#+BEGIN_SRC emacs-lisp
  (use-package helm-spotify-plus
    :after helm
    :general
    (my-leader-def
      ";" '(:wk "spotify")
      "; f" #'helm-spotify-plus
      "; ;" #'helm-spotify-plus-toggle-play-pause
      "; n" #'helm-spotify-plus-next
      "; p" #'helm-spotify-plus-previous))
#+END_SRC
* Programming
** General
*** Semantic mode
#+BEGIN_SRC emacs-lisp
  (semantic-mode 1)
#+END_SRC
*** Completion
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :config
    (ac-config-default))
#+END_SRC
*** Parentheses
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  (electric-pair-mode 1)
#+END_SRC
*** Aggresive-indent
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :hook ((emacs-lisp-mode
	    lisp-interaction-mode
	    scheme-mode
	    clojure-mode)
	   . aggressive-indent-mode))
#+END_SRC
*** Rainbow-delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook ((emacs-lisp-mode
	    lisp-interaction-mode
	    scheme-mode
	    clojure-mode)
	   . rainbow-delimiters-mode))
#+END_SRC
*** Evil-cleverparens
#+BEGIN_SRC emacs-lisp
  (use-package evil-cleverparens
    :hook ((emacs-lisp-mode
	    lisp-interaction-mode
	    scheme-mode
	    clojure-mode)
	   . evil-cleverparens-mode))
#+END_SRC
** Scheme
#+BEGIN_SRC emacs-lisp
  (use-package geiser
    :defer t)
#+END_SRC
* Other modes
** Magit
 #+BEGIN_SRC emacs-lisp
   (use-package magit
     :general
     (my-leader-def "a g" 'magit-status)
     ("C-x g" 'magit-status))
 #+END_SRC
** Org mode
*** Auto fill mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook #'auto-fill-mode)
#+END_SRC
*** Org-edit-special
#+BEGIN_SRC emacs-lisp
  (general-nmap org-mode-map "e" #'org-edit-special)

  (add-hook 'org-src-mode-hook
	    #'(lambda ()
		(define-key evil-normal-state-local-map "e" #'org-edit-src-exit)))
#+END_SRC
** Tetris
#+BEGIN_SRC emacs-lisp
  (evil-set-initial-state 'tetris-mode 'motion)
  (general-def 'motion tetris-mode-map
    "n" #'tetris-start-game
    "p" #'tetris-pause-game
    "q" #'tetris-end-game
    "h" #'tetris-move-left
    "j" #'tetris-move-down
    "k" #'tetris-rotate-prev
    "l" #'tetris-move-right
    "<left>" #'tetris-move-left
    "<down>" #'tetris-move-down
    "<up>" #'tetris-rotate-prev
    "<right>" #'tetris-move-right)
#+END_SRC
