* =lexical-binding=

#+BEGIN_SRC emacs-lisp
  (setq lexical-binding t)
#+END_SRC

* Repositories, =use-package= and =load-path=
** Repositories

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
#+END_SRC

** =use-package=

#+BEGIN_SRC emacs-lisp
  (eval-when-compile (require 'use-package))
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC

** =load-path=
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/res")
#+END_SRC
* Use sensible-defaults.el

Use [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]] for some basic settings.

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/res/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
  (setq visible-bell nil)
#+END_SRC

* Customization and configuration

#+BEGIN_SRC emacs-lisp
  (defvar my-config-org "~/.emacs.d/config.org")
  (defvar my-custom-file "~/.emacs.d/init-custom.el")


  (defun my-open-emacs-config ()
    (interactive)
    (find-file my-config-org))


  (setq custom-file my-custom-file)
  (unless (file-exists-p custom-file)
    (with-temp-buffer
      (write-file custom-file)))
  (load-file custom-file)
#+END_SRC

* Backups

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups")))
#+END_SRC

* =general=

#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    (general-override-mode))
#+END_SRC

* =which-key=
** Setup

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config (which-key-mode))
#+END_SRC

** Naming =evil-leader= keys

#+BEGIN_SRC emacs-lisp
  (defun my-wk-leader-keys (key name &rest rest)
    (which-key-add-key-based-replacements (concat evil-leader/leader " " key) name)
    (unless (null rest)
      (apply #'my-wk-leader-keys rest)))
#+END_SRC

* =evil-leader=
** Setup

#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :config
    (global-evil-leader-mode)
    (evil-leader/set-leader "<SPC>"))
#+END_SRC

** Basic bindings
#+BEGIN_SRC emacs-lisp
  (general-def evil-leader--default-map
    "SPC" #'execute-extended-command
    "h" help-map
    "w" evil-window-map
    "TAB" #'previous-buffer
    "'" #'shell

    "f s" 'save-buffer
    "f f" 'find-file

    "f q q" 'my-open-emacs-config
    "f q c" 'my-compile-emacs-config

    "d" 'switch-to-buffer

    "a d" 'dired
    "a q" 'save-buffers-kill-emacs)

  (my-wk-leader-keys
   "SPC" "M-x"
   "w" "windows"
   "h" "help"
   "f" "files")
#+END_SRC

* =evil-mode=
** =evil=
*** Basic

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :after (general evil-leader)

    :config
    (evil-mode 1)
    (general-evil-setup)
    (general-unbind 'motion "C-b" "C-d" "C-e" "C-m" "C-o" "C-S-o" "C-v" "C-w" "C-y" "TAB")
    (general-unbind 'normal "C-i" "C-n" "C-p" "C-t" "M-." "TAB")

    (general-imap "f" (general-key-dispatch 'self-insert-command
                        :timeout 0.5
                        "d" 'evil-normal-state))

    (general-mmap "," (general-simulate-key "C-c"))
    (general-mmap "C-S-v" #'evil-visual-block)
    (general-mmap "g b" #'evil-jump-backward)

    (evil-set-initial-state 'dired-mode 'motion)

    :custom
    (evil-cross-lines t)
    (evil-disable-insert-state-bindings t)
    (evil-move-beyond-eol t)
    (evil-move-cursor-back nil))
#+END_SRC

*** Make =j= and =k= move by visual lines

#+BEGIN_SRC emacs-lisp
  (evil-declare-motion #'next-line)
  (evil-declare-motion #'previous-line)

  (general-mmap
    "j" #'next-line
    "k" #'previous-line)
#+END_SRC

** =evil-surround=

#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :after evil
    :config (global-evil-surround-mode 1)
    :general
    (general-def 'visual
      "s" #'evil-surround-region
      "S" #'evil-Surround-region)
    (general-def 'normal
      "s" #'evil-surround-edit
      "S" #'evil-Surround-edit))
#+END_SRC

** =evil-org=

#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda () (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+END_SRC

* =ace-jump=

#+BEGIN_SRC emacs-lisp
  (use-package ace-jump-mode
    :general
    ('motion "f" 'ace-jump-char-mode)

    :config
    (evil-declare-motion 'ace-jump-char-mode)

    :custom
    (ac-auto-show-menu t)

    :custom-face
    (ace-jump-face-foreground ((t (:background "black" :foreground "yellow" :weight bold)))))
#+END_SRC

* UI
** Toolbar, menu bar, scroll bar

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
  (menu-bar-mode 0)
#+END_SRC

** Frames

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (setq frame-title-format '(multiple-frames "%b" "Emacs"))
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
  (use-package material-theme
    :config
    (load-theme 'material t))
#+END_SRC

** Mode line

#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)

  (use-package minions
    :config
    (setq minions-mode-line-lighter ""
          minions-mode-line-delimiters '("" . ""))
    (minions-mode 1))

  (setq evil-mode-line-format nil)
#+END_SRC

** Prettify symbols

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC

** Font

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :family "Inconsolata" :height 160)
#+END_SRC

* Windows and frames management
** =winner-mode=

#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
#+END_SRC

** COMMENT =workgroups=

#+BEGIN_SRC emacs-lisp
  (use-package workgroups
    :config
    (setq wg-prefix-key (kbd "C-c w"))
    (workgroups-mode 1)
    (wg-load "~/.emacs.d/workgroups"))
#+END_SRC

** Custom keybindings

#+BEGIN_SRC emacs-lisp
  (general-def evil-window-map
    "u" #'winner-undo
    "r" #'winner-redo
    "N" #'make-frame-command
    "Q" #'delete-frame)

  (evil-leader/set-key
    "o" #'other-window
    "O" #'other-frame)

  (general-def
    "C-o" #'other-window
    "C-S-o" #'other-frame)

#+END_SRC

* =helm=
** =helm=

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :init
    (require 'helm-config)
    (require 'helm-eshell)

    :general
    ("M-x" #'helm-M-x
     "C-x b" #'helm-mini
     "C-x C-b" #'helm-mini
     "C-x C-f" #'helm-find-files
     "M-y" #'helm-show-kill-ring
     "C-:" #'helm-eval-expression-with-eldoc)

    (evil-leader--default-map
     "SPC" #'helm-M-x
     "d" #'helm-mini

     "f f" #'helm-find-files
     "f F" #'helm-find

     "i i" #'helm-semantic-or-imenu
     "i o" #'helm-occur
     "i m" #'helm-all-mark-rings

     "a t" #'helm-top)

    (help-map
     "v" #'helm-apropos
     "f" #'helm-apropos
     "g" #'helm-google-suggest
     "a" #'helm-apropos
     "M" #'helm-man-woman)

    (helm-map
     "TAB" #'helm-execute-persistent-action
     "C-i" #'helm-execute-persistent-action
     "C-z" #'helm-select-action)

    (general-def
      :keymaps '(emacs-lisp-mode-map
                 lisp-interaction-mode-map)
      "<C-tab>" #'helm-lisp-completion-at-point)

    (shell-mode-map "M-r" #'helm-comint-input-ring)

    (general-def
      :states '(motion)
      "g s" #'helm-semantic-or-imenu)

    :custom
    (helm-semantic-fuzzy-match t)
    (helm-imenu-fuzzy-match t)
    (helm-apropos-fuzzy-match t)
    (helm-lisp-fuzzy-completion t)

    :config
    (helm-mode 1)

    (add-hook 'eshell-mode-hook
              #'(lambda ()
                  (local-set-key (kbd "M-r") #'helm-eshell-history))))
#+END_SRC

** =helm-descbinds=

#+BEGIN_SRC emacs-lisp
  (use-package helm-descbinds
    :after helm
    :config (helm-descbinds-mode)
    :general
    (help-map "b" #'helm-descbinds))
#+END_SRC
** =helm-spotify-plus=

#+BEGIN_SRC emacs-lisp
  (use-package helm-spotify-plus
    :after helm

    :general
    (evil-leader--default-map
     ";" '(:wk "spotify")
     "; f" #'helm-spotify-plus
     "; ;" #'helm-spotify-plus-toggle-play-pause
     "; n" #'helm-spotify-plus-next
     "; p" #'helm-spotify-plus-previous)

    :config
    (my-wk-leader-keys ";" "spotify"))
#+END_SRC

* General editing
** Indentation

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4
                indent-tabs-mode nil)

  (general-def "RET" #'newline-and-indent)

  (use-package dtrt-indent
    :config
    (dtrt-indent-mode 1))
#+END_SRC

** Whitespaces

#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :hook (prog-mode . ws-butler-mode))

  (general-def "C-x w" #'whitespace-mode)
#+END_SRC

** Parentheses

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  (electric-pair-mode 1)
#+END_SRC

** =aggresive-indent=

#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :hook ((emacs-lisp-mode
	    lisp-interaction-mode
	    scheme-mode
	    clojure-mode)
	   . aggressive-indent-mode))
#+END_SRC

** =rainbow-delimiters=

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook ((emacs-lisp-mode
	    lisp-interaction-mode
	    scheme-mode
	    clojure-mode)
	   . rainbow-delimiters-mode))
#+END_SRC

** Folding

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'hs-minor-mode)
#+END_SRC

** =evil-cleverparens=

#+BEGIN_SRC emacs-lisp
  (use-package evil-cleverparens
    :hook ((emacs-lisp-mode
            lisp-interaction-mode
            scheme-mode
            clojure-mode)
           . evil-cleverparens-mode)
    :config
    (general-unbind evil-cleverparens-mode-map 'normal #'helm-show-kill-ring))
#+END_SRC

** =semantic=

#+BEGIN_SRC emacs-lisp
  (require 'semantic)

  (global-semanticdb-minor-mode 1)
  (global-semantic-idle-scheduler-mode 1)
  (global-semantic-idle-summary-mode 1)

  (semantic-mode 1)
#+END_SRC

** =company=

#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (global-company-mode 1)
    :custom
    (company-idle-delay 0))


  (use-package company-quickhelp
    :after company
    :config
    (company-quickhelp-mode 1)
    :custom
    (company-quickhelp-delay 0.2))


  (use-package company-box
    :hook (org-mode . company-box-mode)
    :custom (company-box-enable-icon nil))
#+END_SRC

* Languages
** C/C++

*** =helm-gtags=

#+BEGIN_SRC emacs-lisp
  (use-package helm-gtags
    :hook
    ((c-mode
      c++-mode
      asm-mode
      eshell-mode
      dired-mode)
     . helm-gtags-mode)

    :custom
    (helm-gtags-ignore-case t)
    (helm-gtags-auto-update t)
    (helm-gtags-pulse-at-cursor t)
    (helm-gtags-prefix-key "\C-cg")
    (helm-gtags-suggested-key-mapping t)

    :general
    (general-def
      :keymap 'helm-gtags-mode-map
      :states '(normal)
      "g a" #'helm-gtags-tags-in-this-function
      "g l" #'helm-gtags-select
      "g ." #'helm-gtags-dwim
      "g ," #'helm-gtags-pop-stack
      "g <" #'helm-gtags-previous-history
      "g >" #'helm-gtags-next-history))
#+END_SRC

*** =function-args=

#+BEGIN_SRC emacs-lisp
  (use-package function-args
    :config
    (fa-config-default)
    (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
    (set-default 'semantic-case-fold t)

    :general
    (c++-mode-map "<C-tab>" #'moo-complete))
#+END_SRC

*** Completion

#+BEGIN_SRC emacs-lisp
  (use-package company-c-headers
    :after company
    :config
    (add-to-list 'company-backends 'company-c-headers)
    (add-to-list 'company-c-headers-path-system "/usr/include/c++/8/"))
#+END_SRC

*** Compilation

#+BEGIN_SRC emacs-lisp
  (general-def "<f5>"
    #'(lambda ()
        (interactive)
        (setq-local compilation-read-command nil)
        (call-interactively 'compile)))
#+END_SRC

*** GDB

#+BEGIN_SRC emacs-lisp
  (setq gdb-many-windows t
        gdb-show-main t)
#+END_SRC

** Python

*** Elpy

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :config (elpy-enable)

    :general
    (general-def
      :keymap 'python-mode-map
      :states 'normal
      "g d" #'elpy-goto-definition))
#+END_SRC

** Scheme

#+BEGIN_SRC emacs-lisp
  (use-package geiser
    :defer t)
#+END_SRC

** Clojure

#+BEGIN_SRC emacs-lisp
  (use-package cider
    :defer t)
#+END_SRC

** Web development
*** =web-mode=
**** Basic

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :mode ("\\.phtml\\'"
           "\\.tpl\\.php\\'"
           "\\.[agj]sp\\'"
           "\\.as[cp]x\\'"
           "\\.erb\\'"
           "\\.mustache\\'"
           "\\.djhtml\\'"
           "\\.html?\\'"))
#+END_SRC

**** Folding

#+BEGIN_SRC emacs-lisp
  (add-hook 'web-mode-hook
            #'(lambda () (evil-define-key 'normal 'local
                      (kbd "z a") #'web-mode-fold-or-unfold
                      (kbd "z k") #'web-mode-element-children-fold-or-unfold)))
#+END_SRC

* Spelling
** =flyspell-mode=

#+BEGIN_SRC emacs-lisp
  (dolist (hook '(org-mode-hook))
    (add-hook hook #'flyspell-mode))
#+END_SRC

** =flyspell-prog-mode=

#+BEGIN_SRC emacs-lisp
  (dolist (hook '(c++-mode-hook
                  c-mode-hook
                  clojure-mode-hook
                  emacs-lisp-mode-hook
                  scheme-mode-hook
                  python-mode-hook))
    (add-hook hook #'flyspell-prog-mode))
#+END_SRC

** Keybindings

#+BEGIN_SRC emacs-lisp
  (general-def
    "C-<f8>" #'ispell-word
    "<f8>" #'(lambda ()
               (interactive)
               (flyspell-goto-next-error)
               (ispell-word)))
#+END_SRC

* Org mode
** Basic

#+BEGIN_SRC emacs-lisp
  (require 'org)

  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-switchb)
#+END_SRC

** Appearance
*** =org-bullets=

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))
#+END_SRC

*** =org-ellipsis=

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "⤵")
#+END_SRC

*** \LaTeX preview
#+BEGIN_SRC emacs-lisp
  (setq org-latex-create-formula-image-program 'dvipng)
  (setq org-latex-preview-ltxpng-directory "/tmp/ltxpng/")

  (add-hook 'org-mode-hook
            #'(lambda () (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))))

  (general-def org-mode-map "C-c d" #'org-toggle-latex-fragment)
#+END_SRC
*** =org-var-pitch=

[[https://github.com/abac00s/org-var-pitch][My simple plugin]], which allows to mix variable pitch and fixed pitch fonts in Org Mode.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/my-plugins/org-var-pitch")
  (require 'org-var-pitch)
  (org-var-pitch-init)

  (general-def org-mode-map "C-c v" #'org-var-pitch-mode)
#+END_SRC

** =visual-line-mode=

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook #'visual-line-mode)
#+END_SRC

** Source code
*** Use =C-c e= to =edit-special=

#+BEGIN_SRC emacs-lisp
  (general-def org-mode-map "C-c e" #'org-edit-special)
  (general-def org-src-mode-map "C-c e" #'org-edit-src-exit)
#+END_SRC

*** Open in current window

#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

** =electric-quote-mode=

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook #'electric-quote-mode)
#+END_SRC

* Custom keybindings

** Magit

 #+BEGIN_SRC emacs-lisp
   (use-package magit
     :general
     (evil-leader--default-map "a g" 'magit-status)
     ("C-x g" 'magit-status))
 #+END_SRC

** Ranger

#+BEGIN_SRC emacs-lisp
  (use-package ranger
    :general
    (evil-leader--default-map
     "a r" #'ranger))
#+END_SRC

** Tetris

#+BEGIN_SRC emacs-lisp
  (evil-set-initial-state 'tetris-mode 'motion)
  (general-def 'motion tetris-mode-map
    "n" #'tetris-start-game
    "p" #'tetris-pause-game
    "q" #'tetris-end-game
    "h" #'tetris-move-left
    "j" #'tetris-move-down
    "k" #'tetris-rotate-prev
    "l" #'tetris-move-right
    "<left>" #'tetris-move-left
    "<down>" #'tetris-move-down
    "<up>" #'tetris-rotate-prev
    "<right>" #'tetris-move-right)
#+END_SRC

** Shell

#+BEGIN_SRC emacs-lisp
  (general-def 'normal shell-mode-map
    "C-p" #'comint-previous-input
    "C-n" #'comint-next-input
    "C-k" #'comint-previous-input
    "C-j" #'comint-next-input
    "g k" #'comint-previous-prompt
    "g j" #'comint-next-prompt)

  (general-def 'insert shell-mode-map
    "C-p" #'comint-previous-input
    "C-n" #'comint-next-input
    "C-k" #'comint-previous-input
    "C-j" #'comint-next-input)
#+END_SRC

** Eshell

#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'eshell-mode-hook
  ;; (lambda () (evil-define-key 'normal 'local
  ;;         "C-p" #'eshell-previous-input
  ;;         "C-n" #'eshell-next-input
  ;;         "C-k" #'eshell-previous-input
  ;;         "C-j" #'eshell-next-input
  ;;         "g k" #'eshell-previous-prompt
  ;;         "g j" #'eshell-next-prompt)))

  (add-hook 'eshell-mode-hook
            (lambda () (general-def 'normal eshell-mode-map
                    "C-p" #'eshell-previous-input
                    "C-n" #'eshell-next-input
                    "C-k" #'eshell-previous-input
                    "C-j" #'eshell-next-input
                    "g k" #'eshell-previous-prompt
                    "g j" #'eshell-next-prompt)))
#+END_SRC
* Window layout

#+BEGIN_SRC emacs-lisp
  (defun my-triple-layout ()
    "A layout with one main window on the left and two smaller on
  the right."
    (interactive)
    (save-selected-window
      (delete-other-windows)
      (split-window-horizontally -45)
      (other-window 1)
      (select-window (split-window-vertically))))

  (general-def "C-c w" #'my-triple-layout)
#+END_SRC
