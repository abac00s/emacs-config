* =lexical-binding=

#+BEGIN_SRC emacs-lisp
  (setq lexical-binding t)
#+END_SRC

* Repositories, =use-package= and =load-path=
** Repositories

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
#+END_SRC

** =use-package=

#+BEGIN_SRC emacs-lisp
  (eval-when-compile (require 'use-package))
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC

** =load-path=

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/res")
#+END_SRC

* sensible-defaults.el

Use [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]] for some basic settings.

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/res/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
  (setq visible-bell nil)
#+END_SRC

* Customization and configuration
** Configuration file

#+BEGIN_SRC emacs-lisp
  (defvar my-config-org "~/.emacs.d/config.org")

  (defun my-open-emacs-config ()
    (interactive)
    (find-file my-config-org))

  (global-set-key (kbd "C-c q") #'my-open-emacs-config)
#+END_SRC

** A file for saving automatically managed custom variables

#+BEGIN_SRC emacs-lisp
  (defvar my-custom-file "~/.emacs.d/init-custom.el")

  (setq custom-file my-custom-file)
  (unless (file-exists-p custom-file)
    (with-temp-buffer
      (write-file custom-file)))
  (load-file custom-file)
#+END_SRC

* Backups

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups")))
#+END_SRC

* =general=

#+BEGIN_SRC emacs-lisp
  (use-package general)
  (general-override-mode)
#+END_SRC

* =which-key=

#+BEGIN_SRC emacs-lisp
  (use-package which-key)
  (which-key-mode)
#+END_SRC

* =evil-mode=
** Setup

#+BEGIN_SRC emacs-lisp
  (use-package evil)
  (evil-mode 1)
  (general-evil-setup)
#+END_SRC

** Remove unused bindings

#+BEGIN_SRC emacs-lisp
  (general-unbind 'motion "C-b" "C-d" "C-e" "C-f" "C-m" "C-o" "C-S-o" "C-v" "C-y" "TAB")
  (general-unbind 'normal "C-i" "C-n" "C-p" "C-t" "M-." "TAB")

  (general-mmap "C-S-v" #'evil-visual-block)
  (general-mmap "g b" #'evil-jump-backward)
#+END_SRC

** Make =j= and =k= move by visual lines

#+BEGIN_SRC emacs-lisp
  (evil-declare-motion #'next-line)
  (evil-declare-motion #'previous-line)

  (general-mmap
    "j" #'next-line
    "k" #'previous-line)
#+END_SRC

** =fd= as =ESC=

#+BEGIN_SRC emacs-lisp
  (general-imap "f" (general-key-dispatch 'self-insert-command
                      :timeout 0.5
                      "d" 'evil-normal-state))
#+END_SRC

** =,= as =C-c=

#+BEGIN_SRC emacs-lisp
  (general-mmap "," (general-simulate-key "C-c"))
#+END_SRC

* =evil-surround=

#+BEGIN_SRC emacs-lisp
  (use-package evil-surround)
  (global-evil-surround-mode 1)

  (general-def 'visual
    "s" #'evil-surround-region
    "S" #'evil-Surround-region)

  (general-def 'normal
    "s" #'evil-surround-edit
    "S" #'evil-Surround-edit)
#+END_SRC

* TODO =helm=
** =helm=

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :init
    (require 'helm-config)
    (require 'helm-eshell))

  (general-def
    "M-x" #'helm-M-x
    "C-x b" #'helm-mini
    "C-x C-b" #'helm-mini
    "C-x C-f" #'helm-find-files
    "M-y" #'helm-show-kill-ring
    "C-:" #'helm-eval-expression-with-eldoc)

  (general-def help-map
    "v" #'helm-apropos
    "f" #'helm-apropos
    "g" #'helm-google-suggest
    "a" #'helm-apropos
    "M" #'helm-man-woman)

  (general-def helm-map
    "TAB" #'helm-execute-persistent-action
    "C-i" #'helm-execute-persistent-action
    "C-z" #'helm-select-action)

  (general-def
    :keymaps '(emacs-lisp-mode-map
               lisp-interaction-mode-map)
    "<C-tab>" #'helm-lisp-completion-at-point)

  (general-def shell-mode-map "M-r" #'helm-comint-input-ring)

  (general-def 'motion
    "g s" #'helm-semantic-or-imenu)

  (helm-mode 1)
#+END_SRC

** =helm-descbinds=

#+BEGIN_SRC emacs-lisp
  (use-package helm-descbinds
    :after helm
    :config (helm-descbinds-mode)
    :general
    (help-map "b" #'helm-descbinds))
#+END_SRC

** =helm-show-kill-ring=

#+BEGIN_SRC emacs-lisp
  (general-def "M-y" #'helm-show-kill-ring)
#+END_SRC

* =ace-jump=

#+BEGIN_SRC emacs-lisp
  (use-package ace-jump-mode)

  (general-def
    "C-c f f" #'ace-jump-char-mode
    "C-c f l" #'ace-jump-line-mode
    "C-c f d" #'ace-jump-word-mode)
#+END_SRC

* Appearance
** Toolbar, menu bar, scroll bar

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
  (menu-bar-mode 0)
#+END_SRC

** Frames

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (setq frame-title-format '(multiple-frames "%b" "Emacs"))
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :config
    (load-theme 'zenburn t))
#+END_SRC

** Cursor color

#+BEGIN_SRC emacs-lisp
  (set-cursor-color "yellow")
#+END_SRC

** Mode line

#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
  (setq evil-mode-line-format nil)

  (setq-default mode-line-buffer-identification (list -50 (propertized-buffer-identification "%12b")))
#+END_SRC

** Prettify symbols

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC

** Font

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :family "Inconsolata" :height 150)
#+END_SRC

** =visual-line-mode=

#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode 1)
#+END_SRC

** =visual-fill-mode=

#+BEGIN_SRC emacs-lisp
  (use-package visual-fill-column)
#+END_SRC

* Windows and frames management
** =winner-mode=

#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
#+END_SRC

** Custom keybindings

#+BEGIN_SRC emacs-lisp
  (general-def evil-window-map
    "u" #'winner-undo
    "r" #'winner-redo
    "N" #'make-frame-command
    "Q" #'delete-frame)

  (general-def
    "C-o" #'other-window
    "C-S-o" #'other-frame)
#+END_SRC

** Triple window layout

#+BEGIN_SRC emacs-lisp
  (defun my-triple-layout ()
    "A layout with one main window on the left and two smaller on
  the right."
    (interactive)
    (save-selected-window
      (delete-other-windows)
      (split-window-horizontally -45)
      (other-window 1)
      (select-window (split-window-vertically))))

  (general-def "C-c w" #'my-triple-layout)
#+END_SRC

* Files and buffers

#+BEGIN_SRC emacs-lisp
  (general-def
    "C-f" #'helm-find-files
    "C-s" #'save-buffer
    "C-d" #'helm-mini
    "C-S-d" #'switch-to-buffer-other-window
    "C-t" #'previous-buffer
    "C-S-t" #'next-buffer)

  (general-def c-mode-map "C-d" #'helm-mini)
  (general-def shell-mode-map "C-d" #'helm-mini)
  (general-def term-mode-map "C-d" #'helm-mini)
#+END_SRC

* Bookmarks

#+BEGIN_SRC emacs-lisp
  (general-mmap "M" #'helm-bookmarks)
#+END_SRC

* General editing
** Indentation

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4
                indent-tabs-mode nil)

  (general-def "RET" #'newline-and-indent)

  (use-package dtrt-indent
    :config
    (dtrt-indent-mode 1))
#+END_SRC

** White spaces

#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :hook (prog-mode . ws-butler-mode))

  (general-def "C-x w" #'whitespace-mode)
#+END_SRC

** Parentheses

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  (electric-pair-mode 1)
#+END_SRC

*** =rainbow-delimiters=

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook ((emacs-lisp-mode
	    lisp-interaction-mode
	    scheme-mode
	    clojure-mode)
	   . rainbow-delimiters-mode))
#+END_SRC

** =aggresive-indent=

#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :hook ((emacs-lisp-mode
	    lisp-interaction-mode
	    scheme-mode
	    clojure-mode)
	   . aggressive-indent-mode))
#+END_SRC

** Folding

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'hs-minor-mode)
#+END_SRC

** =semantic=

#+BEGIN_SRC emacs-lisp
  (require 'semantic)

  (global-semanticdb-minor-mode 1)
  (global-semantic-idle-scheduler-mode 1)
  (global-semantic-idle-summary-mode 1)

  (semantic-mode 1)
#+END_SRC

** =company=

#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (global-company-mode 1)
    :custom
    (company-idle-delay 0))


  (use-package company-quickhelp
    :after company
    :config
    (company-quickhelp-mode 1)
    :custom
    (company-quickhelp-delay 0.2))
#+END_SRC

** =yasnippents=

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode 1)

    :general
    (evil-leader--default-map
     "s s" #'yas-insert-snippet
     "s n" #'yas-new-snippet
     "s f" #'yas-visit-snippet-file)

    ("C-c s" #'yas-insert-snippet))
#+END_SRC

* Languages
** C/C++
*** =helm-gtags=

#+BEGIN_SRC emacs-lisp
  (use-package helm-gtags
    :hook
    ((c-mode
      c++-mode
      asm-mode
      eshell-mode
      dired-mode)
     . helm-gtags-mode)

    :custom
    (helm-gtags-ignore-case t)
    (helm-gtags-auto-update t)
    (helm-gtags-pulse-at-cursor t)
    (helm-gtags-prefix-key "\C-cg")
    (helm-gtags-suggested-key-mapping t)

    :general
    (general-def
      :keymap 'helm-gtags-mode-map
      :states '(normal)
      "g a" #'helm-gtags-tags-in-this-function
      "g l" #'helm-gtags-select
      "g ." #'helm-gtags-dwim
      "g ," #'helm-gtags-pop-stack
      "g <" #'helm-gtags-previous-history
      "g >" #'helm-gtags-next-history))
#+END_SRC

*** =function-args=

#+BEGIN_SRC emacs-lisp
  (use-package function-args
    :config
    (fa-config-default)
    (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
    (set-default 'semantic-case-fold t)

    :general
    (c++-mode-map "<C-tab>" #'moo-complete))
#+END_SRC

*** Completion

#+BEGIN_SRC emacs-lisp
  (use-package company-c-headers
    :after company
    :config
    (add-to-list 'company-backends 'company-c-headers)
    (add-to-list 'company-c-headers-path-system "/usr/include/c++/6/"))
#+END_SRC

*** Compilation

#+BEGIN_SRC emacs-lisp
  (general-def "<f5>"
    #'(lambda ()
        (interactive)
        (setq-local compilation-read-command nil)
        (call-interactively 'compile)))
#+END_SRC

*** GDB

#+BEGIN_SRC emacs-lisp
  (setq gdb-many-windows t
        gdb-show-main t)
#+END_SRC

** Python

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :config (elpy-enable))
#+END_SRC

** Scheme

#+BEGIN_SRC emacs-lisp
  (use-package geiser :defer t)
#+END_SRC

** Clojure

#+BEGIN_SRC emacs-lisp
  (use-package cider :defer t)
#+END_SRC

** Web development
*** =web-mode=
**** Basic

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :mode ("\\.phtml\\'"
           "\\.tpl\\.php\\'"
           "\\.[agj]sp\\'"
           "\\.as[cp]x\\'"
           "\\.erb\\'"
           "\\.mustache\\'"
           "\\.djhtml\\'"
           "\\.html?\\'"))
#+END_SRC

**** Folding

#+BEGIN_SRC emacs-lisp
  (add-hook 'web-mode-hook
            #'(lambda () (evil-define-key 'normal 'local
                      (kbd "z a") #'web-mode-fold-or-unfold
                      (kbd "z k") #'web-mode-element-children-fold-or-unfold)))
#+END_SRC

*** =emmet-mode=

#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :hook (web-mode))
#+END_SRC

** OCaml

#+BEGIN_SRC emacs-lisp
  (use-package tuareg)
#+END_SRC

*** Fix =C-d= in Tuareg Interactive

#+BEGIN_SRC emacs-lisp
  (add-hook 'tuareg-interactive-mode-hook
            (lambda () (local-set-key (kbd "C-d") #'helm-mini)))
#+END_SRC

** LaTeX

#+BEGIN_SRC emacs-lisp
  (use-package auctex)
#+END_SRC

* Spellcheck

#+BEGIN_SRC emacs-lisp
  (general-def
    "C-<f8>" #'ispell-word
    "<f8>" (lambda ()
             (interactive)
             (flyspell-goto-next-error)
             (ispell-word)))
#+END_SRC

* Other modes
** Org mode
*** Basic

#+BEGIN_SRC emacs-lisp
  (require 'org)

  (general-def :prefix "C-c o"
    "l" #'org-store-link
    "a" #'org-agenda
    "c" #'org-capture
    "b" #'org-switchb)
#+END_SRC

*** =evil-org=

#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda () (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+END_SRC

*** Appearance
**** =org-bullets=

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))
#+END_SRC

**** =org-ellipsis=

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "⤵")
#+END_SRC

**** \LaTeX preview

#+BEGIN_SRC emacs-lisp
  (setq org-latex-create-formula-image-program 'dvipng)
  (setq org-latex-preview-ltxpng-directory "/tmp/ltxpng/")

  (add-hook 'org-mode-hook
            #'(lambda ()
                (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.3))
                (org-toggle-latex-fragment)))

  (general-def org-mode-map "C-c d" #'org-toggle-latex-fragment)
#+END_SRC

*** =visual-line-mode=

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook #'visual-line-mode)
#+END_SRC

*** Source code
**** Use =C-c e= to =edit-special=

#+BEGIN_SRC emacs-lisp
  (general-def org-mode-map "C-c e" #'org-edit-special)
  (general-def org-src-mode-map "C-c e" #'org-edit-src-exit)
#+END_SRC

**** Open in current window

#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

*** =electric-quote-mode=

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook #'electric-quote-mode)
#+END_SRC
** Magit

 #+BEGIN_SRC emacs-lisp
   (use-package magit
     :general
     (evil-leader--default-map "a g" 'magit-status)
     ("C-x g" 'magit-status))
 #+END_SRC

** Ranger

#+BEGIN_SRC emacs-lisp
  (use-package ranger
    :general
    (evil-leader--default-map
     "a r" #'ranger))
#+END_SRC

** Tetris

#+BEGIN_SRC emacs-lisp
  (evil-set-initial-state 'tetris-mode 'motion)
  (general-def 'motion tetris-mode-map
    "n" #'tetris-start-game
    "p" #'tetris-pause-game
    "q" #'tetris-end-game
    "h" #'tetris-move-left
    "j" #'tetris-move-down
    "k" #'tetris-rotate-prev
    "l" #'tetris-move-right
    "<left>" #'tetris-move-left
    "<down>" #'tetris-move-down
    "<up>" #'tetris-rotate-prev
    "<right>" #'tetris-move-right)
#+END_SRC

** Shell

#+BEGIN_SRC emacs-lisp
  (general-def 'normal shell-mode-map
    "C-p" #'comint-previous-input
    "C-n" #'comint-next-input
    "C-k" #'comint-previous-input
    "C-j" #'comint-next-input
    "g k" #'comint-previous-prompt
    "g j" #'comint-next-prompt)

  (general-def 'insert shell-mode-map
    "C-p" #'comint-previous-input
    "C-n" #'comint-next-input
    "C-k" #'comint-previous-input
    "C-j" #'comint-next-input)
#+END_SRC

** Eshell

#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'eshell-mode-hook
  ;; (lambda () (evil-define-key 'normal 'local
  ;;         "C-p" #'eshell-previous-input
  ;;         "C-n" #'eshell-next-input
  ;;         "C-k" #'eshell-previous-input
  ;;         "C-j" #'eshell-next-input
  ;;         "g k" #'eshell-previous-prompt
  ;;         "g j" #'eshell-next-prompt)))

  (add-hook 'eshell-mode-hook
            (lambda ()
              (general-def 'normal eshell-mode-map
                "C-p" #'eshell-previous-input
                "C-n" #'eshell-next-input
                "C-k" #'eshell-previous-input
                "C-j" #'eshell-next-input
                "g k" #'eshell-previous-prompt
                "g j" #'eshell-next-prompt)
              (local-set-key (kbd "M-r") #'helm-eshell-history)))
#+END_SRC

** Info

#+BEGIN_SRC emacs-lisp
  (general-def 'motion Info-mode-map "C-o" #'other-window)
#+END_SRC

** Dired

#+BEGIN_SRC emacs-lisp
  (evil-set-initial-state 'dired-mode 'motion)
#+END_SRC

** DocView

#+BEGIN_SRC emacs-lisp
  (evil-set-initial-state 'doc-view-mode 'motion)

  (general-def 'motion doc-view-mode-map
    "j" #'doc-view-next-line-or-next-page
    "k" #'doc-view-previous-line-or-previous-page
    "J" #'doc-view-scroll-up-or-next-page
    "K" #'doc-view-scroll-down-or-previous-page
    "C-v" #'doc-view-next-page
    "M-v" #'doc-view-previous-page
    "/" #'doc-view-search
    "?" #'doc-view-search-backward
    "n" #'doc-view-search-next-match
    "N" #'doc-view-search-previous-match
    "+" #'doc-view-enlarge
    "=" #'doc-view-enlarge
    "-" #'doc-view-shrink
    "0" #'doc-view-scale-reset
    "H" #'doc-view-fit-height-to-window
    "W" #'doc-view-fit-width-to-window
    "P" #'doc-view-fit-page-to-window
    "g p" #'doc-view-goto-page)
#+END_SRC
