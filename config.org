* Package system
#+BEGIN_SRC emacs-lisp
  (setq lexical-binding t)

  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)

  (eval-when-compile (require 'use-package))
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC
* .emacs.d
** Configuration files
#+BEGIN_SRC emacs-lisp
  (defvar my-config-org "~/.emacs.d/config.org")
  (defvar my-config-el "~/.emacs.d/config.el")
  (defvar my-custom-file "~/.emacs.d/init-custom.el")

  (defun my-open-emacs-config ()
    (interactive)
    (find-file my-config-org))

  (defun my-compile-emacs-config ()
    (interactive)
    (org-babel-tangle-file my-config-org my-config-el)
    (if (byte-compile-file my-config-el)
	(message "Compilation successful!")
      (message "Compilation unsuccessful..."))
    (with-current-buffer "*Compile-Log*" (kill-buffer-and-window)))

  (setq custom-file my-custom-file)
  (unless (file-exists-p custom-file)
    (with-temp-buffer
      (write-file custom-file)))
  (load-file custom-file)
#+END_SRC
** Backups
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups")))
#+END_SRC
* General
#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    (general-override-mode))
#+END_SRC
* Which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config (which-key-mode))

  (defun my-wk-leader-keys (key name &rest rest)
    (which-key-add-key-based-replacements (concat evil-leader/leader " " key) name)
    (unless (null rest)
      (apply #'my-wk-leader-keys rest)))
#+END_SRC
* Evil mode
** Evil-leader
#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :config
    (global-evil-leader-mode)
    (evil-leader/set-leader "<SPC>"))
#+END_SRC
*** Basic bindings
#+BEGIN_SRC emacs-lisp
  (general-def evil-leader--default-map
    "SPC" #'execute-extended-command
    "h" help-map
    "w" evil-window-map
    "TAB" #'previous-buffer

    "f s" 'save-buffer
    "f f" 'find-file

    "f q q" 'my-open-emacs-config
    "f q c" 'my-compile-emacs-config

    "d" 'switch-to-buffer

    "a d" 'dired
    "a q" 'save-buffers-kill-emacs)

  (my-wk-leader-keys
   "SPC" "M-x"
   "w" "windows"
   "h" "help"
   "f" "files")
#+END_SRC
** Evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :after (general evil-leader)

    :config
    (evil-mode 1)
    (general-evil-setup)
    (general-unbind 'motion "C-b" "C-d" "C-e" "C-m" "C-v" "C-w" "C-y" "TAB")
    (general-unbind 'normal "C-i" "C-n" "C-p" "C-t" "M-." "TAB")

    (general-imap "f" (general-key-dispatch 'self-insert-command
                        :timeout 0.5
                        "d" 'evil-normal-state))

    (general-mmap "," (general-simulate-key "C-c"))
    (general-mmap "C-S-v" #'evil-visual-block)
    (general-mmap "g b" #'evil-jump-backward)

    (evil-set-initial-state 'dired-mode 'motion)

    :custom
    (evil-cross-lines t)
    (evil-disable-insert-state-bindings t)
    (evil-move-beyond-eol t)
    (evil-move-cursor-back nil))
#+END_SRC
** Evil-surround
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :after evil
    :config (global-evil-surround-mode 1)
    :general
    (general-def 'visual
      "s" #'evil-surround-region
      "S" #'evil-Surround-region)
    (general-def 'normal
      "s" #'evil-surround-edit
      "S" #'evil-Surround-edit))
#+END_SRC
* Ace-jump
#+BEGIN_SRC emacs-lisp
  (use-package ace-jump-mode
    :general
    ("C-c" 'ace-jump-char-mode)
    ('motion "f" 'ace-jump-char-mode)

    :config
    (evil-declare-motion 'ace-jump-char-mode)

    :custom
    (ac-auto-show-menu t)

    :custom-face
    (ace-jump-face-foreground ((t (:background "black" :foreground "yellow" :weight bold)))))
#+END_SRC
* UI
** Theme
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :if window-system
    :config
    (load-theme 'zenburn t))
#+END_SRC
** Mode line
#+BEGIN_SRC emacs-lisp
  (setq-default mode-line-format
                '(:eval
                  (format-mode-line
                   (list "%e"
                         mode-line-front-space
                         mode-line-mule-info
                         mode-line-client
                         mode-line-modified
                         mode-line-remote
                         "  "
                         ;; mode-line-frame-identification
                         mode-line-buffer-identification
                         "  "
                         mode-line-position
                         vc-mode
                         " (%m)"
                         mode-line-misc-info
                         mode-line-end-spaces))))
#+END_SRC
** Other settings
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
  (menu-bar-mode 0)
  (set-face-attribute 'default nil :family "Inconsolata" :height 160)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (setq frame-title-format '(multiple-frames "%b" "Emacs"))
  (column-number-mode 1)
#+END_SRC
* Windows and frames
** Winner mode
#+BEGIN_SRC emacs-lisp 
  (winner-mode 1)
#+END_SRC
** Custom keybindings
#+BEGIN_SRC emacs-lisp
  (general-def evil-window-map
    "u" #'winner-undo
    "r" #'winner-redo
    "N" #'make-frame-command
    "Q" #'delete-frame)

  (evil-leader/set-key
    "o" #'other-window
    "O" #'other-frame)
#+END_SRC
* Helm
** Basic
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :init
    (require 'helm-config)
    (require 'helm-eshell)

    :general
    ("M-x" #'helm-M-x
     "C-x b" #'helm-mini
     "C-x C-b" #'helm-mini
     "C-x C-f" #'helm-find-files
     "M-y" #'helm-show-kill-ring
     "C-:" #'helm-eval-expression-with-eldoc)

    (evil-leader--default-map
     "SPC" #'helm-M-x
     "d" #'helm-mini

     "f f" #'helm-find-files
     "f F" #'helm-find

     "i i" #'helm-semantic-or-imenu
     "i o" #'helm-occur
     "i m" #'helm-all-mark-rings

     "a t" #'helm-top)

    (help-map
     "v" #'helm-apropos
     "f" #'helm-apropos
     "g" #'helm-google-suggest
     "a" #'helm-apropos
     "M" #'helm-man-woman)

    (helm-map
     "TAB" #'helm-execute-persistent-action
     "C-i" #'helm-execute-persistent-action
     "C-z" #'helm-select-action)

    (general-def
      :keymaps '(emacs-lisp-mode-map
                 lisp-interaction-mode-map)
      "<C-tab>" #'helm-lisp-completion-at-point)

    (shell-mode-map "M-r" #'helm-comint-input-ring)

    (general-def
      :states '(motion)
      "g s" #'helm-semantic-or-imenu)

    :custom
    (helm-semantic-fuzzy-match t)
    (helm-imenu-fuzzy-match t)
    (helm-apropos-fuzzy-match t)
    (helm-lisp-fuzzy-completion t)

    :config
    (helm-mode 1)

    (add-hook 'eshell-mode-hook
              #'(lambda ()
                  (local-set-key (kbd "M-r") #'helm-eshell-history))))
#+END_SRC
** Helm-descbinds
#+BEGIN_SRC emacs-lisp
  (use-package helm-descbinds
    :config (helm-descbinds-mode)
    :general
    (help-map "b" #'helm-descbinds))
#+END_SRC
** Helm-spotify-plus
#+BEGIN_SRC emacs-lisp
  (use-package helm-spotify-plus
    :after helm

    :general
    (evil-leader--default-map
     ";" '(:wk "spotify")
     "; f" #'helm-spotify-plus
     "; ;" #'helm-spotify-plus-toggle-play-pause
     "; n" #'helm-spotify-plus-next
     "; p" #'helm-spotify-plus-previous)

    :config
    (my-wk-leader-keys ";" "spotify"))
#+END_SRC
* Programming
** General
*** Indentation
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4
                indent-tabs-mode nil)

  (general-def "RET" #'newline-and-indent)

  (use-package dtrt-indent
    :config
    (dtrt-indent-mode 1))

  (use-package ws-butler
    :hook (prog-mode . ws-butler-mode))

  (general-def "C-x w" #'whitespace-mode)
#+END_SRC
*** Parentheses
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  (electric-pair-mode 1)
#+END_SRC
*** Aggresive-indent
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :hook ((emacs-lisp-mode
	    lisp-interaction-mode
	    scheme-mode
	    clojure-mode)
	   . aggressive-indent-mode))
#+END_SRC
*** Rainbow-delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook ((emacs-lisp-mode
	    lisp-interaction-mode
	    scheme-mode
	    clojure-mode)
	   . rainbow-delimiters-mode))
#+END_SRC
*** HideShow
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'hs-minor-mode)
#+END_SRC
*** Evil-cleverparens
#+BEGIN_SRC emacs-lisp
  (use-package evil-cleverparens
    :hook ((emacs-lisp-mode
	    lisp-interaction-mode
	    scheme-mode
	    clojure-mode)
	   . evil-cleverparens-mode))
#+END_SRC
*** Semantic
#+BEGIN_SRC emacs-lisp
  (require 'semantic)

  (global-semanticdb-minor-mode 1)
  (global-semantic-idle-scheduler-mode 1)
  (global-semantic-idle-summary-mode 1)

  (semantic-mode 1)
#+END_SRC
*** Completion
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (global-company-mode 1)
    :custom
    (company-idle-delay 0))


  (use-package company-quickhelp
    :after company
    :config
    (company-quickhelp-mode 1)
    :custom
    (company-quickhelp-delay 0.2))
#+END_SRC
** C/C++
*** Gtags
#+BEGIN_SRC emacs-lisp
  (use-package helm-gtags
    :hook
    ((c-mode
      c++-mode
      asm-mode
      eshell-mode
      dired-mode)
     . helm-gtags-mode)

    :custom
    (helm-gtags-ignore-case t)
    (helm-gtags-auto-update t)
    (helm-gtags-pulse-at-cursor t)
    (helm-gtags-prefix-key "\C-cg")
    (helm-gtags-suggested-key-mapping t)

    :general
    (general-def
      :keymap 'helm-gtags-mode-map
      :states '(normal)
      "g a" #'helm-gtags-tags-in-this-function
      "g l" #'helm-gtags-select
      "g ." #'helm-gtags-dwim
      "g ," #'helm-gtags-pop-stack
      "g <" #'helm-gtags-previous-history
      "g >" #'helm-gtags-next-history))
#+END_SRC
*** function-args
#+BEGIN_SRC emacs-lisp
  (use-package function-args
    :config
    (fa-config-default)
    (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
    (set-default 'semantic-case-fold t)

    :general
    (c++-mode-map "<C-tab>" #'moo-complete))
#+END_SRC
*** Completion
#+BEGIN_SRC emacs-lisp
  (use-package company-c-headers
    :after company
    :config
    (add-to-list 'company-backends 'company-c-headers)
    (add-to-list 'company-c-headers-path-system "/usr/include/c++/8/"))
#+END_SRC
*** Compilation
#+BEGIN_SRC emacs-lisp
  (general-def "<f5>"
    #'(lambda ()
        (interactive)
        (setq-local compilation-read-command nil)
        (call-interactively 'compile)))
#+END_SRC
*** GDB
#+BEGIN_SRC emacs-lisp
  (setq gdb-many-windows t
        gdb-show-main t)
#+END_SRC
** Python
*** Elpy
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :config (elpy-enable)

    :general
    (general-def
      :keymap 'python-mode-map
      :states 'normal
      "g d" #'elpy-goto-definition))
#+END_SRC
** Scheme
#+BEGIN_SRC emacs-lisp
  (use-package geiser
    :defer t)
#+END_SRC
** Clojure
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :defer t)
#+END_SRC
* Other modes
** Magit
 #+BEGIN_SRC emacs-lisp
   (use-package magit
     :general
     (evil-leader--default-map "a g" 'magit-status)
     ("C-x g" 'magit-status))
 #+END_SRC
** Org mode
*** Auto fill mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook #'auto-fill-mode)
#+END_SRC
*** Org-edit-special
#+BEGIN_SRC emacs-lisp
  (general-nmap org-mode-map "e" #'org-edit-special)

  (add-hook 'org-src-mode-hook
	    #'(lambda ()
		(define-key evil-normal-state-local-map "e" #'org-edit-src-exit)))
#+END_SRC
** Tetris
#+BEGIN_SRC emacs-lisp
  (evil-set-initial-state 'tetris-mode 'motion)
  (general-def 'motion tetris-mode-map
    "n" #'tetris-start-game
    "p" #'tetris-pause-game
    "q" #'tetris-end-game
    "h" #'tetris-move-left
    "j" #'tetris-move-down
    "k" #'tetris-rotate-prev
    "l" #'tetris-move-right
    "<left>" #'tetris-move-left
    "<down>" #'tetris-move-down
    "<up>" #'tetris-rotate-prev
    "<right>" #'tetris-move-right)
#+END_SRC
