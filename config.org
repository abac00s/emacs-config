* Package repositories
#+BEGIN_SRC emacs-lisp
  (setq lexical-binding t)

  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
#+END_SRC
* .emacs.d
** Configuration files
#+BEGIN_SRC emacs-lisp
  (defun my-open-emacs-config ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  (setq custom-file "~/.emacs.d/init-custom.el")
  (unless (file-exists-p custom-file)
    (with-temp-buffer
      (write-file custom-file)))
  (load-file custom-file)
#+END_SRC
** Backups
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups")))
#+END_SRC
* Evil mode
** Packages
#+BEGIN_SRC emacs-lisp
  (require 'evil)
  (evil-mode 1)

  (require 'evil-surround)
  (global-evil-surround-mode 1)

  (require 'general)
  (general-evil-setup)
#+END_SRC
** Customization variables
#+BEGIN_SRC emacs-lisp
  (setq evil-auto-indent nil
	evil-cross-lines t
	evil-disable-insert-state-bindings t
	evil-move-beyond-eol t
	evil-move-cursor-back nil)
#+END_SRC
** Unmap unwanted keys
#+BEGIN_SRC emacs-lisp
  (general-unbind 'motion "C-b" "C-d" "C-e" "C-m" "C-o" "C-w" "C-y")
  (general-unbind 'normal "C-i" "C-n" "C-p" "C-t" "TAB")
#+END_SRC
** Use =f d= to escape insert state
#+BEGIN_SRC emacs-lisp
  (general-imap "f" (general-key-dispatch 'self-insert-command
                      :timeout 0.5
                      "d" 'evil-normal-state))
#+END_SRC
* Leader
#+BEGIN_SRC emacs-lisp
  (defvar my-leader-key "SPC")
  (defvar my-leader-map (make-sparse-keymap))

  (general-def my-leader-map
    "SPC" 'execute-extended-command
    "h" '(:keymap help-map)
    "w" '(:keymap evil-window-map)

    "f s" 'save-buffer
    "f f" 'find-file
    "f q q" 'my-open-emacs-config
    "f q c" 'my-compile-emacs-config

    "d d" 'switch-to-buffer
    "d h" 'previous-buffer
    "d l" 'next-buffer
    "d v" 'list-buffers

    "a d" 'dired
    "a q" 'save-buffers-kill-emacs)

  (general-def 'motion "SPC" '(:keymap my-leader-map))
#+END_SRC
* Ace-jump
#+BEGIN_SRC emacs-lisp
  (require 'ace-jump-mode)

  (setq ac-auto-show-menu t)

  (general-def "C-j" 'ace-jump-char-mode)

  (evil-declare-motion 'ace-jump-char-mode)
  (general-mmap "f" 'ace-jump-char-mode)
#+END_SRC
* Which-key
** Package
#+BEGIN_SRC emacs-lisp
  (require 'which-key)
  (which-key-mode)
#+END_SRC
** Add which-key names to leader keys
#+BEGIN_SRC emacs-lisp
  (defun my-set-leader-which-key-name (keys name)
    (which-key-add-key-based-replacements (concat my-leader-key " " keys) name))

  (defun my-set-leader-which-key-names (&rest args)
    (unless (null args)
      (my-set-leader-which-key-name (car args) (car (cdr args)))
      (apply 'my-set-leader-which-key-names (cdr (cdr args)))))

  (my-set-leader-which-key-names "SPC" "M-x"
				 "f" "files"
				 "d" "buffers"
				 "w" "windows"
				 "h" "help")
#+END_SRC
* UI
#+BEGIN_SRC emacs-lisp
  (load-theme 'material t)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
  (menu-bar-mode 0)
  (set-face-attribute 'default nil :family "Inconsolata" :height 140)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (setq frame-title-format '(multiple-frames "%b" "Emacs"))
#+END_SRC
* Programming
** General
*** Completion
#+BEGIN_SRC emacs-lisp
  (require 'auto-complete)
  (ac-config-default)
#+END_SRC
*** Parentheses
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  (electric-pair-mode 1)
#+END_SRC
** General lisp settings
*** Modes
#+BEGIN_SRC emacs-lisp
  (defvar lisp-modes '(emacs-lisp-mode
		       lisp-interaction-mode
		       scheme-mode
		       clojure-mode))

  (defun mode-to-hook (mode)
    (intern-soft (concat (symbol-name mode) "-hook")))
#+END_SRC
*** Rainbow-delimiters
#+BEGIN_SRC emacs-lisp
  (require 'rainbow-delimiters)

  (dolist (mode lisp-modes)
    (add-hook (mode-to-hook mode) #'rainbow-delimiters-mode))
#+END_SRC
*** Aggresive-indent
#+BEGIN_SRC emacs-lisp
  (dolist (mode lisp-modes)
    (add-hook (mode-to-hook mode) #'aggressive-indent-mode))
#+END_SRC
*** Evil-cleverparens
#+BEGIN_SRC emacs-lisp
  (require 'evil-cleverparens)

  (dolist (mode lisp-modes)
    (add-hook (mode-to-hook mode) #'evil-cleverparens-mode))
#+END_SRC
** Scheme
#+BEGIN_SRC emacs-lisp
  (require 'geiser)
#+END_SRC
* Other modes
** Magit
 #+BEGIN_SRC emacs-lisp
   (require 'magit)
   (general-def my-leader-map "a g" 'magit-status)
   (general-def "C-x g" 'magit-status)
 #+END_SRC
** Auto-fill-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook #'auto-fill-mode)
#+END_SRC
